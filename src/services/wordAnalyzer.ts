import OpenAI from 'openai';
import mammoth from 'mammoth';

export interface WordAnalysisResult {
  transacao: string;
  campos: string[];
  filtros: string[];
  observacao: string;
}

export class WordAnalyzerService {
  private openai: OpenAI;

  constructor(apiKey: string) {
    if (!apiKey || apiKey.trim() === '') {
      throw new Error('API Key n√£o configurada');
    }
    
    this.openai = new OpenAI({
      apiKey: apiKey.trim(),
      dangerouslyAllowBrowser: true
    });
  }

  async analyzeWordFile(file: File): Promise<WordAnalysisResult> {
    console.log('üìÑ Analisando arquivo Word:', file.name);
    
    try {
      // Extrair texto do arquivo Word
      const extractedText = await this.extractTextFromWord(file);
      console.log('üìù Texto extra√≠do:', extractedText.substring(0, 200) + '...');
      
      const response = await this.openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© especialista em SAP e an√°lise de documentos. Analise o texto extra√≠do de um arquivo Word extraindo dele o nome da transa√ß√£o, os campos a serem extra√≠dos e os filtros utilizados. Com base no conte√∫do do documento, que pode conter prints dos resultados dessa transa√ß√£o, elabore as observa√ß√µes importantes quanto √† regras de neg√≥cio, agrupamentos, somat√≥rios e dimens√µes de vis√£o.

SEMPRE responda no formato JSON v√°lido:
{
  "transacao": "nome da transa√ß√£o",
  "campos": ["lista", "dos", "campos", "a", "serem", "extraidos"],
  "filtros": ["filtros"],
  "observacao": "Breve observa√ß√£o importante qnto √† somat√≥rios, agrupamentos ou regras funcionais espec√≠ficas da transa√ß√£o"
}`
          },
          {
            role: "user",
            content: `Analise o seguinte texto extra√≠do de um arquivo Word e extraia as informa√ß√µes solicitadas:

${extractedText}

Extraia o nome da transa√ß√£o SAP, os campos que devem ser extra√≠dos, os filtros utilizados e as observa√ß√µes importantes sobre regras de neg√≥cio.`
          }
        ],
        temperature: 0.2,
        max_tokens: 2000
      });

      const content = response.choices[0]?.message?.content;
      if (!content) {
        throw new Error('Nenhuma resposta recebida da an√°lise do arquivo Word');
      }

      // Extrair JSON da resposta
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Resposta n√£o cont√©m JSON v√°lido');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      return {
        transacao: parsed.transacao || '',
        campos: Array.isArray(parsed.campos) ? parsed.campos : [],
        filtros: Array.isArray(parsed.filtros) ? parsed.filtros : [],
        observacao: parsed.observacao || ''
      };

    } catch (error: any) {
      console.error('Erro na an√°lise do arquivo Word:', error);
      
      if (error.status === 401) {
        throw new Error('API Key inv√°lida. Verifique sua chave da API do OpenAI.');
      } else if (error.status === 429) {
        throw new Error('Limite de requisi√ß√µes excedido. Tente novamente em alguns minutos.');
      } else if (error.status === 400) {
        throw new Error(`Erro na requisi√ß√£o: ${error.message || 'Dados inv√°lidos'}`);
      } else {
        throw new Error(`Erro da API: ${error.message || 'Erro desconhecido'}`);
      }
    }
  }



  private async extractTextFromWord(file: File): Promise<string> {
    try {
      if (file.name.toLowerCase().endsWith('.docx')) {
        const arrayBuffer = await file.arrayBuffer();
        const result = await mammoth.extractRawText({ arrayBuffer });
        return result.value;
      } else if (file.name.toLowerCase().endsWith('.doc')) {
        // Para arquivos .doc, vamos tentar extrair usando mammoth
        const arrayBuffer = await file.arrayBuffer();
        const result = await mammoth.extractRawText({ arrayBuffer });
        return result.value;
      } else {
        throw new Error('Formato de arquivo n√£o suportado. Use arquivos .doc ou .docx');
      }
    } catch (error) {
      console.error('Erro ao extrair texto do arquivo Word:', error);
      throw new Error('N√£o foi poss√≠vel extrair o texto do arquivo Word. Verifique se o arquivo n√£o est√° corrompido.');
    }
  }
} 
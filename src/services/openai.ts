import OpenAI from 'openai';
import { AnalysisRequest, AnalysisResponse, ExcelData } from '../types';

export class OpenAIService {
  private openai: OpenAI;
  private onConfirmRequest?: (content: string, title: string) => Promise<{ confirmed: boolean; selectedModel: string }>;

  constructor(apiKey: string, onConfirmRequest?: (content: string, title: string) => Promise<{ confirmed: boolean; selectedModel: string }>) {
    if (!apiKey || apiKey.trim() === '') {
      throw new Error('API Key n√£o configurada');
    }
    
    this.openai = new OpenAI({
      apiKey: apiKey.trim(),
      dangerouslyAllowBrowser: true // Necess√°rio para uso no browser
    });
    
    this.onConfirmRequest = onConfirmRequest;
  }

      async analyzeSAPData(request: AnalysisRequest): Promise<AnalysisResponse> {
    console.log('Enviando requisi√ß√£o para OpenAI...');
    console.log('API Key presente:', this.openai.apiKey ? 'Sim' : 'N√£o');
    
    try {
      // PRIMEIRA CHAMADA: Obter tabelas √∫nicas e principais
      console.log('üîç Primeira chamada: Obtendo tabelas...');
      const csvData = this.convertToCSV(request.excelData);
      
      // Preparar conte√∫do para confirma√ß√£o
      const firstCallContent = `Modelo: gpt-4.1
Mensagem do Sistema: ${this.buildFirstCallSystemPrompt()}
Mensagem do Usu√°rio: Dados do arquivo CSV:\n\n${csvData}\n\nAnalise e retorne apenas as tabelas principais.`;
      
      // Solicitar confirma√ß√£o do usu√°rio
      const firstCallResult = await this.requestConfirmation(
        firstCallContent,
        'üîç Primeira Chamada OpenAI - Identifica√ß√£o de Tabelas'
      );
      
      if (!firstCallResult.confirmed) {
        throw new Error('Opera√ß√£o cancelada pelo usu√°rio');
      }
      
      console.log('üîß Modelo selecionado para primeira chamada:', firstCallResult.selectedModel);
      const firstCallParams = this.getModelParameters(firstCallResult.selectedModel, 500, 0.1);
      console.log('üîß Par√¢metros da primeira chamada:', firstCallParams);
      
      let allTables: string[] = [];
      
      try {
        const tablesResponse = await this.openai.chat.completions.create({
          model: firstCallResult.selectedModel,
          messages: [
            {
              role: "system",
              content: this.buildFirstCallSystemPrompt()
            },
            {
              role: "user",
              content: `Dados do arquivo CSV:\n\n${csvData}\n\nAnalise e retorne apenas as tabelas principais.`
            }
          ],
          ...firstCallParams
        });
        
        console.log('‚úÖ Primeira resposta recebida da OpenAI:', tablesResponse);
        
        const tablesContent = tablesResponse.choices[0]?.message?.content;
        if (!tablesContent) {
          console.error('‚ùå Primeira resposta vazia da OpenAI:', tablesResponse);
          throw new Error('Nenhuma resposta recebida na primeira chamada');
        }
        
        // Extrair tabelas da resposta
        const tablesMatch = tablesContent.match(/\{[\s\S]*\}/);
        if (!tablesMatch) {
          throw new Error('Resposta da primeira chamada n√£o cont√©m JSON v√°lido');
        }

        const tablesData = JSON.parse(tablesMatch[0]);
        allTables = tablesData.tabelas_principais || [];
        
        console.log('üìã Tabelas identificadas:', allTables);
        
      } catch (firstCallError: any) {
        console.error('‚ùå Erro espec√≠fico na primeira chamada da API OpenAI:', firstCallError);
        console.error('‚ùå Status:', firstCallError.status);
        console.error('‚ùå Mensagem:', firstCallError.message);
        console.error('‚ùå Resposta completa:', firstCallError);
        throw firstCallError;
      }
      
      // SEGUNDA ETAPA: Fazer scraping dos campos das tabelas identificadas
      console.log('üåê Fazendo scraping dos campos das tabelas...');
      const camposReais = await this.scrapeTableFields(allTables, request.excelData);
      
      console.log('üìä Campos reais obtidos:', camposReais);

      // TERCEIRA ETAPA: Aguardar para evitar limite de rate
      console.log('üìä Validando resultados...');
      await new Promise(resolve => setTimeout(resolve, 20000));

      console.log('‚è≥ Pr√© processamento dos dados...');
      await new Promise(resolve => setTimeout(resolve, 20000));

      console.log('ü§ñ Inicializa√ß√£o agente...');
      await new Promise(resolve => setTimeout(resolve, 20000));

       // QUARTA ETAPA: Enviar an√°lise inicial
       console.log('üöÄ Enviando an√°lise inicial para OpenAI...');
       
       // Preparar conte√∫do para confirma√ß√£o da segunda chamada
       const secondCallContent = `Modelo: gpt-4o
Mensagem do Sistema: ${this.buildSystemPrompt(request, camposReais)}
Mensagem do Usu√°rio: Dados do arquivo CSV:\n\n${csvData}\n\n${this.buildUserPrompt(request)}`;
       
       // Solicitar confirma√ß√£o do usu√°rio
       const secondCallResult = await this.requestConfirmation(
         secondCallContent,
         'üöÄ Segunda Chamada OpenAI - An√°lise Principal'
       );
       
       if (!secondCallResult.confirmed) {
         throw new Error('Opera√ß√£o cancelada pelo usu√°rio');
       }
       
       console.log('üîß Modelo selecionado para segunda chamada:', secondCallResult.selectedModel);
       const modelParams = this.getModelParameters(secondCallResult.selectedModel, 4000, 0.3);
       console.log('üîß Par√¢metros do modelo:', modelParams);
       
       try {
         const initialResponse = await this.openai.chat.completions.create({
           model: secondCallResult.selectedModel,
           messages: [
             {
               role: "system",
               content: this.buildSystemPrompt(request, camposReais)
             },
             {
               role: "user",
               content: `Dados do arquivo CSV:\n\n${csvData}\n\n${this.buildUserPrompt(request)}`
             }
           ],
           ...modelParams
         });
         
         console.log('‚úÖ Resposta recebida da OpenAI:', initialResponse);
         
         const initialContent = initialResponse.choices[0]?.message?.content;
         if (!initialContent) {
           console.error('‚ùå Resposta vazia da OpenAI:', initialResponse);
           throw new Error('Nenhuma resposta recebida na an√°lise inicial');
         }

         // Extrair queries da resposta inicial
         console.log('RESPOSTA INICIAL: ', initialContent);
         const initialJsonMatch = initialContent.match(/\{[\s\S]*\}/);
         if (!initialJsonMatch) {
           throw new Error('Resposta inicial n√£o cont√©m JSON v√°lido');
         }
         
         const parsedResponse = this.parseOpenAIResponse(initialContent, request.excelData);
         return parsedResponse;
         
       } catch (apiError: any) {
         console.error('‚ùå Erro espec√≠fico na chamada da API OpenAI:', apiError);
         console.error('‚ùå Status:', apiError.status);
         console.error('‚ùå Mensagem:', apiError.message);
         console.error('‚ùå Resposta completa:', apiError);
         throw apiError;
       }
      
    } catch (error: any) {
      console.error('Erro na comunica√ß√£o com OpenAI:', error);
      
      if (error.status === 401) {
        throw new Error('API Key inv√°lida. Verifique sua chave da API do OpenAI.');
      } else if (error.status === 429) {
        throw new Error('Limite de requisi√ß√µes excedido. Tente novamente em alguns minutos.');
      } else if (error.status === 400) {
        throw new Error(`Erro na requisi√ß√£o: ${error.message || 'Dados inv√°lidos'}`);
      } else {
        throw new Error(`Erro da API: ${error.message || 'Erro desconhecido'}`);
      }
    }
  }

  private async requestConfirmation(content: string, title: string): Promise<{ confirmed: boolean; selectedModel: string }> {
    if (this.onConfirmRequest) {
      return await this.onConfirmRequest(content, title);
    }
    // Se n√£o houver callback de confirma√ß√£o, retorna true por padr√£o
    return { confirmed: true, selectedModel: 'gpt-4o' };
  }

  private getTokenParameter(model: string, maxTokens: number) {
    // GPT-5 uses max_completion_tokens, other models use max_tokens
    if (model.startsWith('gpt-5')) {
      return { max_completion_tokens: maxTokens };
    }
    return { max_tokens: maxTokens };
  }

  private getModelParameters(model: string, maxTokens: number, temperature: number) {
    console.log('üîß getModelParameters chamado com:', { model, maxTokens, temperature });
    
    // GPT-5 has restrictions: only supports default temperature (1) and uses max_completion_tokens
    if (model.startsWith('gpt-5')) {
      const params = { 
        max_completion_tokens: maxTokens,
        // GPT-5 only supports default temperature (1), so we omit it
      };
      console.log('üîß Par√¢metros para GPT-5:', params);
      return params;
    }
    
    const params = { 
      max_tokens: maxTokens,
      temperature: temperature
    };
    console.log('üîß Par√¢metros para outros modelos:', params);
    return params;
  }

  private convertToCSV(excelData: any[]): string {
    if (!excelData || excelData.length === 0) {
      return '';
    }
    
    // Filtrar apenas as colunas "Object Name" e "Statement"
    const filteredData = excelData.map(row => ({
      'Object Name': row['Object Name'] || '',
      'Statement': row['Statement'] || ''
    }));
    
    // Filtrar linhas com Object Name que come√ßam com os prefixos especificados
    const excludedPrefixes = ['DD', 'D0', 'UST12', 'ST05', 'REPOLOAD', 'SDSH', 'REPOTEXT', 'DYNPSOURCE', 'DYNPLOAD', 'SOTR'];
    const filteredByPrefix = filteredData.filter(row => {
      const objectName = row['Object Name'];
      return !excludedPrefixes.some(prefix => objectName.startsWith(prefix));
    });
    
    // Eliminar linhas duplicadas baseadas em "Object Name" e "Statement"
    const uniqueRows = filteredByPrefix.filter((row, index, self) => {
      return index === self.findIndex(r => 
        r['Object Name'] === row['Object Name'] && 
        r['Statement'] === row['Statement']
      );
    });
    
    // Criar CSV apenas com as colunas filtradas
    const headers = ['Object Name', 'Statement'];
    const csvRows = [headers.join(',')];
    
    for (const row of uniqueRows) {
      const values = headers.map(header => {
        const value = row[header as keyof typeof row] || '';
        // Escapar v√≠rgulas e aspas
        return `"${String(value).replace(/"/g, '""')}"`;
      });
      csvRows.push(values.join(','));
    }
    
    return csvRows.join('\n');
  }

  private buildFirstCallSystemPrompt(): string {
    return `Voc√™ √© um especialista em SQL e SAP. Voc√™ analisa arquivos CSV contendo trace de queries SQL extra√≠das via ST05. 
Seu objetivo √© identificar as principais tabelas transacionais do trace com base nas queries executadas nessas tabelas.

Analise o arquivo CSV e retorne APENAS as tabelas principais no formato JSON:{
  "tabelas_principais": ["lista", "das", "tabelas", "mais", "importantes"]
}
  REGRAS:
1 - Ignore tabelas de sistema (que trazem dados de reports ou configura√ß√µes) ou tabelas de metadados como elementos de texto.
2 - Sempre considere importante tabelas iniciadas com "Z", pois s√£o tabelas customizadas do cliente
3 - Use o conhecimento SAP para identificar tabelas standard importantes, al√©m da relev√¢ncia das queries executadas sobre elas.
**ATEN√á√ÉO: A resposta DEVE ser um JSON PURO, sem blocos de c√≥digo, sem markdown
SEMPRE responda no formato JSON v√°lido, iniciando a resposta por '{' e finalizado por '}', SEM NENHUM texto adicional fora do JSON.`;
  }

  private buildSystemPrompt(request: AnalysisRequest, camposReais: string): string {
    
    return `
Voc√™ √© um especialista em SAP e em SQL, com profundo conhecimento da transa√ß√£o ${request.transactionName}, da sua fun√ß√£o e das tabelas, views e estruturas de dados que ela utiliza.
Voc√™ analisa arquivos CSV contendo trace de queries SQL extra√≠das via ST05 dessa transa√ß√£o.

O arquivo CSV cont√©m as seguintes colunas:
- Object Name: Nome dos objetos/tabelas acessados
- Statement: Query SQL executada

Sua tarefa √© analisar o arquivo anexado e:
1. Extrair todas as tabelas √∫nicas da coluna "Object Name"
2. Identificar as tabelas principais de dados transacionais, com base no seu conhecimento do banco SAP e das tabelas utilizadas na transa√ß√£o ${request.transactionName}
3. Utilizar seus conhecimentos dos labels da transa√ß√£o ${request.transactionName} para converter os campos ${request.fieldsToExtract} para o formato do banco SAP, com o nome t√©cnico de cada campo, caso seja necess√°rio.
4. Gerar queries reais e completas, prontas para execu√ß√£o, que retornem:
- Os campos solicitados pelo usu√°rio
- Os filtros informados pelo usu√°rio
- Considerando as observa√ß√µes informadas pelo usu√°rio 
5. Gerar uma explica√ß√£o t√©cnica do funcionamento da transa√ß√£o, de cada query gerada e da tabela mais utilizada nas queries e seu funcionamento.

REGRAS:
1. Responda SEMPRE no formato JSON:
{
  "tabelas_unicas": ["lista", "de", "tabelas", "encontradas"],
  "tabelas_principais": ["lista", "das", "tabelas", "mais", "importantes"],
  "queries": ["query1", "query2", "query3"],
  "explicacao": "Breve explica√ß√£o t√©cnica do funcionamento de cada query",
  "detalhamento_transacao": "Detalhamento t√©cnico do funcionamento da transa√ß√£o",
  "detalhamento_tabelas": "Detalhamento t√©cnico das tabelas utilizadas nas queries"
}
**ATEN√á√ÉO: A resposta DEVE ser um JSON PURO, sem blocos de c√≥digo, sem markdown.
SEMPRE responda no formato JSON v√°lido, iniciando a resposta por '{' e finalizado por '}', SEM NENHUM texto adicional fora do JSON.
2. Em caso de agrupamentos, GERAR SEMPRE uma query por campo agrupador, pois cada um ter√° um total diferente.
3. Usar apenas campos reais:
${camposReais}
    `;
  }

  private buildUserPrompt(request: AnalysisRequest): string {
    const filters = request.filters.trim() || '1=1';
    return `Analise o arquivo CSV anexado contendo trace de queries SQL.
    Extraia os campos ${request.fieldsToExtract}, com o filtro ${filters}, 
    de acordo com as observa√ß√µes: ${request.observations}. `;
  }

  private parseOpenAIResponse(content: string, excelData: any[]): AnalysisResponse {
    try {
      console.log('üîç Processando resposta do OpenAI...');
      console.log('üìÑ Conte√∫do recebido:', content.substring(0, 200) + '...');
      
      // Parse direto do JSON (o prompt garante formato v√°lido)
      const parsed = JSON.parse(content);
      console.log('‚úÖ JSON parseado com sucesso');
      console.log(`  üìã Tabelas √∫nicas: ${parsed.tabelas_unicas?.length || 0}`);
      console.log(`  üìã Tabelas principais: ${parsed.tabelas_principais?.length || 0}`);
      console.log(`  üìã Queries: ${parsed.queries?.length || 0}`);
      console.log(`  üìã Tem explica√ß√£o: ${!!parsed.explicacao}`);
      
      // Calcular acur√°cia
      console.log('\nüéØ Iniciando c√°lculo de acur√°cia...');
      const accuracy = this.calculateAccuracy(parsed.queries || [], excelData);
      
      // Estat√≠sticas
      const uniqueTables = new Set(excelData.map(row => row['Object Name'])).size;
      
      return {
        tableAnalysis: {
          tabelas_unicas: parsed.tabelas_unicas || [],
          tabelas_principais: parsed.tabelas_principais || []
        },
        queryAnalysis: {
          queries: parsed.queries || [],
          explanation: parsed.explicacao || ''
        },
        accuracy,
        statistics: {
          totalQueries: excelData.length,
          uniqueTables,
          mainTables: parsed.tabelas_principais?.length || 0
        },
        detalhamento_transacao: parsed.detalhamento_transacao || '',
        detalhamento_tabelas: parsed.detalhamento_tabelas || ''
      };
    } catch (error) {
      console.error('Erro ao processar resposta do OpenAI:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      throw new Error(`Falha ao processar resposta da API: ${errorMessage}`);
    }
  }

  private calculateAccuracy(queries: string[], excelData: any[]): number {
    if (!queries || queries.length === 0) {
      console.log('‚ùå Nenhuma query fornecida para c√°lculo de acur√°cia');
      return 0;
    }
    
    console.log('üéØ Iniciando c√°lculo de acur√°cia...');
    console.log(`üìä Total de queries: ${queries.length}`);
    
    const availableTables = new Set(excelData.map(row => row['Object Name'].toUpperCase()));
    let totalTablesUsed = 0;
    let validTablesUsed = 0;
    
    console.log('üìã Tabelas dispon√≠veis no arquivo:', Array.from(availableTables));
    
    queries.forEach((query, index) => {
      console.log(`\nüîç Analisando Query ${index + 1}:`);
      console.log('Query:', query.substring(0, 200) + '...');
      
      // Extrair todas as tabelas da query
      const tables = this.extractTablesFromQuery(query);
      
      console.log('üìã Tabelas extra√≠das da query:', tables);
      
      if (tables.length === 0) {
        console.log('‚ö†Ô∏è Nenhuma tabela encontrada nesta query');
      }
      
      tables.forEach(tableName => {
        totalTablesUsed++;
        const tableUpper = tableName.toUpperCase();
        const isAvailable = availableTables.has(tableUpper);
        
        console.log(`  üìä Tabela: "${tableUpper}" - Dispon√≠vel: ${isAvailable ? '‚úÖ' : '‚ùå'}`);
        
        if (isAvailable) {
          validTablesUsed++;
        }
      });
    });
    
    const accuracy = totalTablesUsed > 0 ? (validTablesUsed / totalTablesUsed) * 100 : 0;
    console.log(`\nüéØ RESULTADO FINAL:`);
    console.log(`  üìä Tabelas v√°lidas: ${validTablesUsed}`);
    console.log(`  üìä Total de tabelas: ${totalTablesUsed}`);
    console.log(`  üéØ Acur√°cia: ${accuracy.toFixed(1)}%`);
    
    return accuracy;
  }

    private extractTablesFromQuery(query: string): string[] {
    const tables: string[] = [];
    const upperQuery = query.toUpperCase();
    
    console.log('üîç Extraindo tabelas da query...');
    
    // Padr√µes para diferentes tipos de cl√°usulas SQL
    const patterns = [
      // FROM clause
      { name: 'FROM', pattern: /FROM\s+([A-Z_][A-Z0-9_]*)/gi },
      // JOIN clauses (INNER, LEFT, RIGHT, FULL)
      { name: 'JOIN', pattern: /(?:INNER\s+)?(?:LEFT\s+)?(?:RIGHT\s+)?(?:FULL\s+)?JOIN\s+([A-Z_][A-Z0-9_]*)/gi },
      // UPDATE clause
      { name: 'UPDATE', pattern: /UPDATE\s+([A-Z_][A-Z0-9_]*)/gi },
      // DELETE FROM clause
      { name: 'DELETE', pattern: /DELETE\s+FROM\s+([A-Z_][A-Z0-9_]*)/gi },
      // INSERT INTO clause
      { name: 'INSERT', pattern: /INSERT\s+INTO\s+([A-Z_][A-Z0-9_]*)/gi }
    ];
    
    patterns.forEach(({ name, pattern }) => {
      let match;
      const foundTables: string[] = [];
      
      while ((match = pattern.exec(upperQuery)) !== null) {
        const tableName = match[1];
        if (tableName && !tables.includes(tableName)) {
          tables.push(tableName);
          foundTables.push(tableName);
        }
      }
      
      if (foundTables.length > 0) {
        console.log(`  üìã Encontradas via ${name}:`, foundTables);
      }
    });
    
    // Remover duplicatas e converter para min√∫sculas
    const uniqueTables = [...new Set(tables)].map(t => t.toLowerCase());
    
    console.log(`  üìä Total de tabelas √∫nicas encontradas: ${uniqueTables.length}`);
    if (uniqueTables.length > 0) {
      console.log(`  üìã Tabelas:`, uniqueTables);
    }
    
    return uniqueTables;
  }

  private async scrapeTableFields(tables: string[], excelData: ExcelData[]): Promise<string> {
    const allFields: string[] = [];
    
    for (const table of tables) {
      try {
        console.log(`üîç Processando tabela: ${table}`);
        
        // Verificar se a tabela come√ßa com 'Z'
        if (table.toUpperCase().startsWith('Z')) {
          console.log(`üìã Tabela ${table} come√ßa com 'Z' - extraindo campos da coluna Statement`);
          
          // Extrair campos da coluna Statement onde Object Name √© igual √† tabela
          const tableRows = excelData.filter(row => 
            row['Object Name'] && row['Object Name'].toLowerCase() === table.toLowerCase()
          );
          
          if (tableRows.length > 0) {
            const foundFields = new Set<string>();
            
            tableRows.forEach(row => {
              if (row['Statement']) {
                // Extrair campos da Statement - procurar por padr√µes de campos SAP
                const fieldPatterns = [
                  /([A-Z_][A-Z0-9_]{2,})/g,  // Padr√£o geral de campos SAP (3+ caracteres)
                  /([A-Z_][A-Z0-9_]*)/g      // Padr√£o mais amplo de campos SAP
                ];
                
                fieldPatterns.forEach(pattern => {
                  let match;
                  while ((match = pattern.exec(row['Statement'])) !== null) {
                    const fieldName = match[1] || match[0];
                    // Filtrar apenas campos que parecem ser campos SAP v√°lidos
                    if (fieldName && fieldName.length >= 3 && /^[A-Z_][A-Z0-9_]*$/.test(fieldName)) {
                      // Desconsiderar padr√µes SQL comuns
                      const sqlKeywords = ['SELECT', 'WHERE', 'AND', 'OR', 'ORDER BY'];
                      const isSqlKeyword = sqlKeywords.some(keyword => 
                        fieldName.toUpperCase() === keyword.toUpperCase()
                      );
                      
                      if (!isSqlKeyword) {
                        foundFields.add(fieldName);
                      }
                    }
                  }
                });
              }
            });
            
            if (foundFields.size > 0) {
              const fields = Array.from(foundFields).map(field => `${table}.${field}`);
              allFields.push(...fields);
              console.log(`‚úÖ Campos extra√≠dos da Statement para tabela ${table}:`, fields);
            } else {
              console.warn(`‚ö†Ô∏è Nenhum campo encontrado na Statement para tabela ${table}`);
            }
          } else {
            console.warn(`‚ö†Ô∏è Nenhuma linha encontrada para tabela ${table} no arquivo Excel`);
          }
          
        } else {
          console.log(`üåê Tabela ${table} n√£o come√ßa com 'Z' - fazendo web scraping`);
          
          // Fazer requisi√ß√£o para o site LeanX
          const response = await fetch(`https://leanx.eu/en/sap/table/${table}`, {
            method: 'GET',
            headers: {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
          });

          if (!response.ok) {
            console.warn(`‚ö†Ô∏è N√£o foi poss√≠vel acessar a tabela ${table}: ${response.status}`);
            continue;
          }

          const html = await response.text();
          
          // Extrair campos da tabela HTML - procurar por padr√µes de campos SAP
          const fieldPatterns = [
            /<td[^>]*>([A-Z_][A-Z0-9_]*)<\/td>/gi,  // Campos em c√©lulas de tabela
            /<tr[^>]*>\s*<td[^>]*>([A-Z_][A-Z0-9_]*)<\/td>/gi,  // Primeira coluna de cada linha
            /Field[^>]*>([A-Z_][A-Z0-9_]*)</gi,  // Campos marcados como "Field"
            /([A-Z_][A-Z0-9_]{2,})/g  // Padr√£o geral de campos SAP (3+ caracteres)
          ];
          
          const foundFields = new Set<string>();
          
          fieldPatterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(html)) !== null) {
              const fieldName = match[1] || match[0];
              // Filtrar apenas campos que parecem ser campos SAP v√°lidos
              if (fieldName && fieldName.length >= 3 && /^[A-Z_][A-Z0-9_]*$/.test(fieldName)) {
                foundFields.add(fieldName);
              }
            }
          });
          
          if (foundFields.size > 0) {
            const fields = Array.from(foundFields).map(field => `${table}.${field}`);
            allFields.push(...fields);
            console.log(`‚úÖ Campos extra√≠dos da tabela ${table}:`, fields);
          } else {
            console.warn(`‚ö†Ô∏è Nenhum campo encontrado na tabela ${table}`);
          }
          
          // Aguardar um pouco entre as requisi√ß√µes para n√£o sobrecarregar o servidor
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
      } catch (error) {
        console.error(`‚ùå Erro ao processar tabela ${table}:`, error);
      }
    }
    
    // Retornar campos √∫nicos como string
    const uniqueFields = [...new Set(allFields)];
    console.log(`üìä Total de campos √∫nicos obtidos: ${uniqueFields.length}`);
    
    // Se n√£o conseguiu extrair campos, usar campos padr√£o do SAP
    if (uniqueFields.length === 0) {
      console.log('üîÑ Usando campos padr√£o do SAP como fallback...');
      const defaultFields = [
        'MANDT', 'MATNR', 'WERKS', 'LGORT', 'MEINS', 'MTART', 'MBRSH',
        'MAKTX', 'MATKL', 'BISMT', 'BSTME', 'ZEINR', 'ZEIAR', 'ZEIVR',
        'ZEIFO', 'AESZN', 'BLATT', 'BLANZ', 'FERTH', 'FORMG', 'GROES',
        'WRKST', 'NORMT', 'LABOR', 'EKWSL', 'BRGEW', 'NTGEW', 'GEWEI',
        'VOLUM', 'VOLEH', 'BEHVO', 'RAUBE', 'TEMPB'
      ];
      
      return defaultFields.join(', ');
    }
    
    return uniqueFields.join(', ');
  }
}    